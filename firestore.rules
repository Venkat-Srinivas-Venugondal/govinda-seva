/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for user profiles and allows authenticated users to submit issue reports and emergency alerts.
 * Admins can manage broadcast messages and Darshan times. Staff shifts are also recorded.
 *
 * Data Structure:
 * - /issueReports/{issueReportId}: Issue reports submitted by devotees.
 * - /emergencyAlerts/{emergencyAlertId}: Emergency alerts sent by devotees.
 * - /users/{userId}: Public profiles for all users.
 * - /broadcastMessages/{broadcastMessageId}: Broadcast messages sent by admins.
 * - /roles/{userId}: User roles (admin, volunteer) for access control.
 * - /darshanTimes/{darshanTimeId}: Darshan wait times.
 * - /staffShifts/{shiftId}: Staff shift details.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data in /users/{userId}.
 * - Any authenticated user can create issue reports and emergency alerts.
 * - Only authenticated users can read issue reports and emergency alerts.
 * - Only admins can create, update, and delete broadcast messages and Darshan times.
 * - Anyone can read Staff Shifts, but only authenticated users can create them. Update and delete operations are forbidden.
 * - Listing of users is disallowed.
 * - Read-only access is not explicitly granted to any collection.
 *
 * Denormalization for Authorization:
 * - For /issueReports, the 'reportedBy' field within the document is used to verify ownership on updates and deletes.
 * - For /emergencyAlerts, the 'sentBy' field is used to verify ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows any authenticated user to read issue reports and create new issue reports. Only the user who created the report can update or delete it.
     * @path /issueReports/{issueReportId}
     * @allow (create) User with auth.uid can create a new issue report.
     * @allow (get) Authenticated user can read any issue report.
     * @allow (update) User with auth.uid matching the 'reportedBy' field can update an existing issue report.
     * @allow (delete) User with auth.uid matching the 'reportedBy' field can delete an existing issue report.
     * @deny (update) User with auth.uid not matching the 'reportedBy' field cannot update an existing issue report.
     * @deny (delete) User with auth.uid not matching the 'reportedBy' field cannot delete an existing issue report.
     * @principle Authenticated users can create and manage their own issue reports.
     */
    match /issueReports/{issueReportId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.reportedBy == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.reportedBy == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.reportedBy == request.auth.uid;
    }

    /**
     * @description Allows any authenticated user to read emergency alerts and create new emergency alerts. Only the user who created the alert can update or delete it.
     * @path /emergencyAlerts/{emergencyAlertId}
     * @allow (create) User with auth.uid can create a new emergency alert.
     * @allow (get) Authenticated user can read any emergency alert.
     * @allow (update) User with auth.uid matching the 'sentBy' field can update an existing emergency alert.
     * @allow (delete) User with auth.uid matching the 'sentBy' field can delete an existing emergency alert.
     * @deny (update) User with auth.uid not matching the 'sentBy' field cannot update an existing emergency alert.
     * @deny (delete) User with auth.uid not matching the 'sentBy' field cannot delete an existing emergency alert.
     * @principle Authenticated users can create and manage their own emergency alerts.
     */
    match /emergencyAlerts/{emergencyAlertId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.sentBy == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.sentBy == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.sentBy == request.auth.uid;
    }

    /**
     * @description Allows a user to read and write their own profile data.
     * @path /users/{userId}
     * @allow (create) User with auth.uid matching userId can create their profile.
     * @allow (get) User with auth.uid matching userId can read their profile.
     * @allow (update) User with auth.uid matching userId can update their profile.
     * @allow (delete) User with auth.uid matching userId can delete their profile.
     * @deny (create) User with auth.uid not matching userId cannot create a profile.
     * @deny (get) User with auth.uid not matching userId cannot read another user's profile.
     * @deny (update) User with auth.uid not matching userId cannot update another user's profile.
     * @deny (delete) User with auth.uid not matching userId cannot delete another user's profile.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow update: if isOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow delete: if isOwner(userId);
    }

     /**
      * @description Allows admins to manage broadcast messages.
      * @path /broadcastMessages/{broadcastMessageId}
      * @allow (create) Admins can create broadcast messages.
      * @allow (get) Authenticated user can read broadcast messages.
      * @allow (update) Admins can update broadcast messages.
      * @allow (delete) Admins can delete broadcast messages.
      * @deny (create) Non-admins cannot create broadcast messages.
      * @deny (update) Non-admins cannot update broadcast messages.
      * @deny (delete) Non-admins cannot delete broadcast messages.
      * @principle Restricts broadcast message management to admins.
      */
    match /broadcastMessages/{broadcastMessageId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Stores user roles (admin, volunteer) for access control. Only admins can create, update, and delete roles.
     * @path /roles/{userId}
     * @allow (create) Admins can create roles.
     * @allow (get) Authenticated user can read roles.
     * @allow (update) Admins can update roles.
     * @allow (delete) Admins can delete roles.
     * @deny (create) Non-admins cannot create roles.
     * @deny (update) Non-admins cannot update roles.
     * @deny (delete) Non-admins cannot delete roles.
     * @principle Only admins can manage user roles.
     */
    match /roles/{userId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows admins to manage Darshan wait times.
     * @path /darshanTimes/{darshanTimeId}
     * @allow (create) Admins can create Darshan wait times.
     * @allow (get) Any signed in user can read the current Darshan wait time.
     * @allow (list) Any signed in user can list the Darshan wait times.
     * @allow (update) Admins can update Darshan wait times.
     * @allow (delete) Admins can delete Darshan wait times.
     * @deny (create) Non-admins cannot create Darshan wait times.
     * @deny (update) Non-admins cannot update Darshan wait times.
     * @deny (delete) Non-admins cannot delete Darshan wait times.
     * @principle Restricts Darshan time management to admins.
     */
    match /darshanTimes/{darshanTimeId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows authenticated users to create staff shift records.
     * @path /staffShifts/{shiftId}
     * @allow (create) Authenticated users can create staff shift records.
     * @allow (get) Any signed in user can get staff shift records.
     * @allow (list) Any signed in user can list staff shift records.
     * @deny (update) No one can update staff shift records.
     * @deny (delete) No one can delete staff shift records.
     */
    match /staffShifts/{shiftId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isAdmin() {
    return get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.isAdmin == true;
  }
}