/**
 * @file Overview
 * This ruleset enforces a role-based access control model, where admins have broad access, volunteers have limited access, and regular users (devotees) have access to their own data and can create issue reports and emergency alerts.
 *
 * Data Structure:
 * - /issueReports/{issueReportId}: Issue reports submitted by users.
 * - /emergencyAlerts/{emergencyAlertId}: Emergency alerts sent by users.
 * - /users/{userId}: Public profile information for each user.
 * - /broadcastMessages/{broadcastMessageId}: Messages broadcast by admins.
 * - /roles/{userId}: Stores user roles (isAdmin, isVolunteer).
 * - /darshanTimes/{darshanTimeId}: Darshan wait times.
 * - /staffShifts/{shiftId}: Staff shift details.
 *
 * Key Security Decisions:
 * - Users can only read their own profile data in /users/{userId}.
 * - Only admins can create, update, or delete broadcast messages.
 * - Only admins can create and update Darshan wait times.
 * - IssueReports and EmergencyAlerts can be created by any signed-in user, but cannot be listed publicly.
 * - No public listing of IssueReports and EmergencyAlerts.
 *
 * Denormalization for Authorization:
 * - User roles (isAdmin, isVolunteer) are stored in the /roles/{userId} document to avoid complex queries during rule evaluation.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an admin.
     */
    function isAdmin() {
      return get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.isAdmin == true;
    }

    /**
     * @description Checks if the user is a volunteer.
     */
    function isVolunteer() {
      return get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.isVolunteer == true;
    }

    /**
     * @description Checks if the user is the existing owner of the document.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for issue reports.
     * @path /issueReports/{issueReportId}
     * @allow (create) Signed-in user creates a new issue report.
     * @deny (create) User tries to create an issue report without being signed in.
     * @principle Allows any signed-in user to create issue reports, but restricts listing.
     */
    match /issueReports/{issueReportId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for emergency alerts.
     * @path /emergencyAlerts/{emergencyAlertId}
     * @allow (create) Signed-in user creates a new emergency alert.
     * @deny (create) User tries to create an emergency alert without being signed in.
     * @principle Allows any signed-in user to create emergency alerts, but restricts listing.
     */
    match /emergencyAlerts/{emergencyAlertId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (get) User can read their own profile.
     * @allow (create) User can create their profile if the user ID matches the authenticated user ID.
     * @deny (create) User tries to create a profile with a mismatched user ID.
     * @allow (update) User can update their own profile.
     * @deny (update) User tries to update someone else's profile.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if false;
    }

    /**
     * @description Rules for broadcast messages.
     * @path /broadcastMessages/{broadcastMessageId}
     * @allow (create) Admin creates a new broadcast message.
     * @deny (create) Non-admin user tries to create a broadcast message.
     * @allow (update) Admin updates an existing broadcast message.
     * @deny (update) Non-admin user tries to update a broadcast message.
     * @allow (delete) Admin deletes a broadcast message.
     * @deny (delete) Non-admin user tries to delete a broadcast message.
     * @principle Restricts broadcast message management to admins only.
     */
    match /broadcastMessages/{broadcastMessageId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for user roles.
     * @path /roles/{userId}
     */
    match /roles/{userId} {
        allow get: if isAdmin() || isOwner(userId);
        allow list: if false;
        allow create: if isAdmin();
        allow update: if isAdmin() && resource != null;
        allow delete: if false;
    }

    /**
     * @description Rules for Darshan wait times.
     * @path /darshanTimes/{darshanTimeId}
     * @allow (create) Admin creates a new Darshan time entry.
     * @deny (create) Non-admin user tries to create a Darshan time entry.
     * @allow (update) Admin updates an existing Darshan time entry.
     * @deny (update) Non-admin user tries to update a Darshan time entry.
     * @allow (delete) Admin deletes a Darshan time entry.
     * @deny (delete) Non-admin user tries to delete a Darshan time entry.
     * @principle Restricts Darshan time management to admins only.
     */
    match /darshanTimes/{darshanTimeId} {
        allow get: if true;
        allow list: if true;
        allow create: if isAdmin();
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for staff shifts.
     * @path /staffShifts/{shiftId}
     */
    match /staffShifts/{shiftId} {
        allow get: if isAdmin() || isVolunteer();
        allow list: if isAdmin();
        allow create: if isAdmin();
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
    }
  }
}