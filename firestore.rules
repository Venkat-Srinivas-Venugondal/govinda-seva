/**
 * @file Firestore Security Rules
 * @core_philosophy This ruleset enforces a role-based access control model.
 *  - Admins have full read/write access.
 *  - Users (devotees) can create issue reports and emergency alerts.
 *  - Users can read their own profile data.
 *  - Staff shift data is only accessible to admins.
 * @data_structure
 *  - /issueReports/{issueReportId}: Stores issue reports.
 *  - /emergencyAlerts/{emergencyAlertId}: Stores emergency alerts.
 *  - /users/{userId}: Stores user profiles.
 *  - /broadcastMessages/{broadcastMessageId}: Stores broadcast messages.
 *  - /roles/{userId}: Stores user roles (isAdmin, isVolunteer).
 *  - /darshanTimes/{darshanTimeId}: Stores Darshan wait times.
 *  - /staffShifts/{shiftId}: Stores shift details for staff.
 * @key_security_decisions
 *  - Only admins can create/update/delete broadcast messages, darshan times and staff shifts.
 *  - Users can only read their own user profile.
 *  - Listing of users is disallowed to prevent data leakage.
 * @denormalization_for_authorization N/A - Role based authorization is used.
 * @structural_segregation N/A
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user has the 'admin' role.
     */
    function isAdmin() {
      return get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.isAdmin == true;
    }

    /**
     * @description Checks if the document exists and the authenticated user is the owner.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description
     *  Allows any authenticated user to create issue reports.
     *  No update or delete allowed
     * @path /issueReports/{issueReportId}
     * @allow (create) User with auth.uid 'user123' creates a new issue report.
     * @deny (update) User with auth.uid 'user123' attempts to update an issue report.
     * @deny (delete) User with auth.uid 'user123' attempts to delete an issue report.
     * @principle Allows authenticated users to report issues, but does not allow modifications or deletions.
     */
    match /issueReports/{issueReportId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description
     *  Allows any authenticated user to create emergency alerts.
     *  No update or delete allowed
     * @path /emergencyAlerts/{emergencyAlertId}
     * @allow (create) User with auth.uid 'user123' creates a new emergency alert.
     * @deny (update) User with auth.uid 'user123' attempts to update an emergency alert.
     * @deny (delete) User with auth.uid 'user123' attempts to delete an emergency alert.
     * @principle Allows authenticated users to send emergency alerts, but does not allow modifications or deletions.
     */
    match /emergencyAlerts/{emergencyAlertId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description
     *  Allows a user to read their own profile.
     *  Allows a user to create their own profile, enforcing that the document ID matches their auth UID.
     *  Allows a user to update their own profile, enforcing immutability of the user ID.
     *  Does not allow listing all users.
     * @path /users/{userId}
     * @allow (get) User with auth.uid 'user123' reads their own profile.
     * @allow (create) User with auth.uid 'user123' creates a profile with document ID 'user123'.
     * @allow (update) User with auth.uid 'user123' updates their profile data.
     * @deny (get) User with auth.uid 'user456' attempts to read profile of user with ID 'user123'.
     * @deny (create) User with auth.uid 'user123' attempts to create a profile with document ID 'user456'.
     * @deny (list) Any user attempts to list all profiles in /users.
     * @principle Enforces user ownership for profile access, creation, and updates. Prevents unauthorized access and modification of user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if false;
    }

    /**
     * @description
     *  Allows admins to manage broadcast messages.
     * @path /broadcastMessages/{broadcastMessageId}
     * @allow (create) Admin creates a new broadcast message.
     * @allow (update) Admin updates an existing broadcast message.
     * @allow (delete) Admin deletes a broadcast message.
     * @deny (create) Non-admin attempts to create a broadcast message.
     * @deny (update) Non-admin attempts to update a broadcast message.
     * @deny (delete) Non-admin attempts to delete a broadcast message.
     * @principle Restricts broadcast message management to administrators.
     */
    match /broadcastMessages/{broadcastMessageId} {
      allow get: if true;
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description
     *  Allows admins to manage user roles.
     * @path /roles/{userId}
     * @allow (create) Admin creates a role entry for a user.
     * @allow (update) Admin updates a role entry for a user.
     * @deny (create) Non-admin attempts to create a role entry.
     * @deny (update) Non-admin attempts to update a role entry.
     * @principle Restricts role management to administrators.
     */
    match /roles/{userId} {
      allow get: if isAdmin() || isOwner(userId);
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if false;
    }

    /**
     * @description
     *  Allows admins to manage Darshan wait times.
     * @path /darshanTimes/{darshanTimeId}
     * @allow (create) Admin creates a new Darshan time entry.
     * @allow (update) Admin updates an existing Darshan time entry.
     * @allow (delete) Admin deletes a Darshan time entry.
     * @deny (create) Non-admin attempts to create a Darshan time entry.
     * @deny (update) Non-admin attempts to update a Darshan time entry.
     * @deny (delete) Non-admin attempts to delete a Darshan time entry.
     * @principle Restricts Darshan time management to administrators.
     */
    match /darshanTimes/{darshanTimeId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description
     *  Allows admins to manage staff shift details.
     * @path /staffShifts/{shiftId}
     * @allow (create) Admin creates a new staff shift entry.
     * @allow (update) Admin updates an existing staff shift entry.
     * @allow (delete) Admin deletes a staff shift entry.
     * @deny (create) Non-admin attempts to create a staff shift entry.
     * @deny (update) Non-admin attempts to update a staff shift entry.
     * @deny (delete) Non-admin attempts to delete a staff shift entry.
     * @principle Restricts staff shift management to administrators.
     */
    match /staffShifts/{shiftId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
  }
}