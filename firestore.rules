/**
 * @fileOverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict access control based on user roles (admin, volunteer, devotee) and resource ownership.
 * Data validation is relaxed to allow for rapid prototyping and schema iteration.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profiles.
 * - /roles/{userId}: Stores user roles (isAdmin, isVolunteer).
 * - /issueReports/{issueReportId}: Stores issue reports.
 * - /emergencyAlerts/{emergencyAlertId}: Stores emergency alerts.
 * - /broadcastMessages/{broadcastMessageId}: Stores broadcast messages sent by admins.
 * - /darshanTimes/{darshanTimeId}: Stores historical and current Darshan wait times.
 *
 * Key Security Decisions:
 * - User listing is disabled to protect user privacy.
 * - The /darshanTimes collection is publicly readable, but write access is restricted to admins.
 * - Data validation is minimal, focusing on authorization-critical fields.
 *
 * Denormalization for Authorization:
 * - User roles (isAdmin, isVolunteer) are stored in a separate /roles/{userId} document to simplify authorization checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is an existing owner of the resource.
     *              This function combines the ownership check with the existence check.
     * @param {string} userId The user ID to compare against the resource's UID.
     * @return {boolean} True if the user is the existing owner, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource.data != null;
    }

    /**
     * @description Checks if the current user has the 'admin' role.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
        return isSignedIn() && get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.isAdmin == true;
    }

    /**
     * @description Checks if the current user has the 'volunteer' role.
     * @return {boolean} True if the user is a volunteer, false otherwise.
     */
    function isVolunteer() {
        return isSignedIn() && get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.isVolunteer == true;
    }

    /**
     * @description Rules for the /issueReports collection.
     * @path /issueReports/{issueReportId}
     * @allow (create) Signed-in user can create an issue report.
     * @deny (create) Anonymous user cannot create an issue report.
     * @allow (get) Signed-in user can get an issue report.
     * @deny (get) Anonymous user cannot get an issue report.
     * @allow (update) Signed-in user can update an existing issue report.
     * @deny (update) Anonymous user cannot update an existing issue report.
     * @allow (delete) Signed-in user can delete an existing issue report.
     * @deny (delete) Anonymous user cannot delete an existing issue report.
     * @principle Authenticated users can submit issue reports.
     */
    match /issueReports/{issueReportId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for the /emergencyAlerts collection.
     * @path /emergencyAlerts/{emergencyAlertId}
     * @allow (create) Signed-in user can create an emergency alert.
     * @deny (create) Anonymous user cannot create an emergency alert.
     * @allow (get) Signed-in user can get an emergency alert.
     * @deny (get) Anonymous user cannot get an emergency alert.
     * @allow (update) Signed-in user can update an emergency alert.
     * @deny (update) Anonymous user cannot update an emergency alert.
     * @allow (delete) Signed-in user can delete an emergency alert.
     * @deny (delete) Anonymous user cannot delete an emergency alert.
     * @principle Authenticated users can submit emergency alerts.
     */
    match /emergencyAlerts/{emergencyAlertId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for the /users collection.
     * @path /users/{userId}
     * @allow (create) User can create their own profile.
     * @deny (create) User cannot create another user's profile.
     * @allow (get) Any signed-in user can read a user profile.
     * @deny (get) Anonymous user cannot read user profiles.
     * @allow (update) User can update their own profile.
     * @deny (update) User cannot update another user's profile.
     * @allow (delete) User can delete their own profile.
     * @deny (delete) User cannot delete another user's profile.
     * @principle Users can manage their own profiles.
     */
    match /users/{userId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for the /broadcastMessages collection.
     * @path /broadcastMessages/{broadcastMessageId}
     * @allow (create) Only admins can create broadcast messages.
     * @deny (create) Non-admins cannot create broadcast messages.
     * @allow (get) Any signed-in user can read broadcast messages.
     * @deny (get) Anonymous user cannot read broadcast messages.
     * @allow (update) Only admins can update broadcast messages.
     * @deny (update) Non-admins cannot update broadcast messages.
     * @allow (delete) Only admins can delete broadcast messages.
     * @deny (delete) Non-admins cannot delete broadcast messages.
     * @principle Admins can manage broadcast messages.
     */
    match /broadcastMessages/{broadcastMessageId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for the /roles collection.
     * @path /roles/{userId}
     * @allow (create) User can create their own role document.
     * @deny (create) User cannot create another user's role document.
     * @allow (get) Only admins can read user roles.
     * @deny (get) Non-admins cannot read user roles.
     * @allow (update) Only admins can update user roles.
     * @deny (update) Non-admins cannot update user roles.
     * @allow (delete) Only admins can delete user roles.
     * @deny (delete) Non-admins cannot delete user roles.
     * @principle Admins manage user roles.
     */
    match /roles/{userId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for the /darshanTimes collection.
     * @path /darshanTimes/{darshanTimeId}
     * @allow (create) Only admins can create darshan times.
     * @deny (create) Non-admins cannot create darshan times.
     * @allow (get) Any user can read darshan times.
     * @allow (update) Only admins can update darshan times.
     * @deny (update) Non-admins cannot update darshan times.
     * @allow (delete) Only admins can delete darshan times.
     * @deny (delete) Non-admins cannot delete darshan times.
     * @principle Darshan times are publicly readable but only admins can modify them.
     */
    match /darshanTimes/{darshanTimeId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}