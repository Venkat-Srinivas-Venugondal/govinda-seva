/**
 * @description This ruleset enforces a role-based access control model.
 *
 * Data Structure:
 * - /issueReports: Stores issue reports, accessible to authenticated users.
 * - /emergencyAlerts: Stores emergency alerts, accessible to authenticated users.
 * - /users: Stores user profiles, owner-only access.
 * - /broadcastMessages: Stores broadcast messages, writable only by admins.
 * - /roles: Stores user roles (isAdmin, isVolunteer).
 * - /darshanTimes: Stores Darshan wait times, writable only by admins.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profiles.
 * - Only admins can create broadcast messages and update Darshan times.
 * - Listing of users is denied for security reasons.
 *
 * Denormalization for Authorization:
 * - The `roles` collection is used to determine admin/volunteer status.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
          return get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.isAdmin == true;
    }

    /**
     * @description Allows any authenticated user to create issue reports.
     * @path /issueReports/{issueReportId}
     * @allow (create) User with auth.uid "user123" creates an issue report.
     * @deny (create) Unauthenticated user tries to create an issue report.
     * @principle Authenticated users can report issues.
     */
    match /issueReports/{issueReportId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows any authenticated user to create emergency alerts.
     * @path /emergencyAlerts/{emergencyAlertId}
     * @allow (create) User with auth.uid "user456" creates an emergency alert.
     * @deny (create) Unauthenticated user tries to create an emergency alert.
     * @principle Authenticated users can send emergency alerts.
     */
    match /emergencyAlerts/{emergencyAlertId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (get) User with auth.uid "user789" reads their own profile.
     * @allow (create) User with auth.uid "user789" creates their own profile.
     * @allow (update) User with auth.uid "user789" updates their own profile.
     * @deny (get) User with auth.uid "user789" tries to read another user's profile.
     * @deny (create) User with auth.uid "user789" tries to create a profile with a different userId.
     * @deny (update) User with auth.uid "user789" tries to update another user's profile.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows admins to create broadcast messages.
     * @path /broadcastMessages/{broadcastMessageId}
     * @allow (create) Admin with isAdmin == true creates a broadcast message.
     * @deny (create) Non-admin user tries to create a broadcast message.
     * @principle Restricts broadcast message creation to admins.
     */
    match /broadcastMessages/{broadcastMessageId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows only admins to read and write user roles.
     * @path /roles/{userId}
     */
    match /roles/{userId} {
      allow get: if isSignedIn() && isAdmin();
      allow list: if false;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

      /**
       * @description Allows admins to create and update Darshan times.
       * @path /darshanTimes/{darshanTimeId}
       * @allow (create) Admin user creates Darshan time entry.
       * @allow (update) Admin user updates Darshan time entry.
       * @deny (create) Non-admin user tries to create a Darshan time entry.
       * @deny (update) Non-admin user tries to update a Darshan time entry.
       * @principle Restricts Darshan time management to admins.
       */
    match /darshanTimes/{darshanTimeId} {
        allow get: if true;
        allow list: if true;
        allow create: if isSignedIn() && isAdmin();
        allow update: if isSignedIn() && isAdmin();
        allow delete: if false;
      }
  }
}