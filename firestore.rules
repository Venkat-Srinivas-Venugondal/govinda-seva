/**
 * @file Firebase Security Rules for Firestore.
 *
 * @core_philosophy This ruleset prioritizes security by enforcing strict access controls based on user roles and explicit ownership.
 *  It is written in Prototyping Mode, which means data validation is omitted.
 *  All read and write requests are explicitly allowed or denied.
 *
 * @data_structure
 *  - `/issueReports/{issueReportId}`: Public collection for issue reports. Anyone can read, but only the reporter can modify.
 *  - `/emergencyAlerts/{emergencyAlertId}`: Public collection of emergency alerts.
 *  - `/users/{userId}`: User profiles. Only the authenticated user can read/write their own profile.
 *  - `/broadcastMessages/{broadcastMessageId}`: Messages broadcast by admins.
 *  - `/roles/{userId}`: Stores user roles.
 *  - `/darshanTimes/{darshanTimeId}`: Stores historical and current Darshan wait times.
 *  - `/staffShifts/{shiftId}`: Stores shift details for staff and volunteers.
 *
 * @key_security_decisions
 *  - Listing of users is explicitly denied.
 *  - Roles are stored separately from user profiles to avoid needing a get() call.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows any authenticated user to list issue reports.
     * @path /issueReports/{issueReportId}
     * @allow (list) User is authenticated.
     * @deny (list) Never explicitly denied, so anyone can list.
     * @principle Allows listing of issue reports for all users.
     */
    match /issueReports/{issueReportId} {
      allow get: if true;
      allow list: if true;

      /**
       * @description Allows any authenticated user to create an issue report, but only if the reportedBy field matches their UID. Allows the user who created an issue report to update and delete it.
       * @path /issueReports/{issueReportId}
       * @allow (create) User "ceyu78qpWXOj5qLGvYyfac2g7WF2" can create an issue report if request.auth.uid == request.resource.data.reportedBy.
       * @allow (update) User "ceyu78qpWXOj5qLGvYyfac2g7WF2" can update the issue report if request.auth.uid == resource.data.reportedBy.
       * @allow (delete) User "ceyu78qpWXOj5qLGvYyfac2g7WF2" can delete the issue report if request.auth.uid == resource.data.reportedBy.
       * @deny (create) User "ceyu78qpWXOj5qLGvYyfac2g7WF2" cannot create an issue report if request.auth.uid != request.resource.data.reportedBy.
       * @deny (update) User "ceyu78qpWXOj5qLGvYyfac2g7WF2" cannot update the issue report if request.auth.uid != resource.data.reportedBy.
       * @deny (delete) User "ceyu78qpWXOj5qLGvYyfac2g7WF2" cannot delete the issue report if request.auth.uid != resource.data.reportedBy.
       * @principle Enforces ownership for updates and deletes, and validates the reportedBy field on create.
       */
      allow create: if isSignedIn() && request.resource.data.reportedBy == request.auth.uid;
      allow update: if isSignedIn() && request.auth.uid == resource.data.reportedBy;
      allow delete: if isSignedIn() && request.auth.uid == resource.data.reportedBy;
    }

    /**
     * @description Allows any authenticated user to create and list emergency alerts.
     * @path /emergencyAlerts/{emergencyAlertId}
     * @allow (create) User is authenticated.
     * @allow (list) User is authenticated.
     * @deny (create) User is not authenticated.
     * @deny (list) User is not authenticated.
     * @principle Allows emergency alerts to be created by any user and to be listed.
     */
    match /emergencyAlerts/{emergencyAlertId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows a user to read and write their own user profile.
     * @path /users/{userId}
     * @allow (get) User "ceyu78qpWXOj5qLGvYyfac2g7WF2" can get their own profile.
     * @allow (create) User "ceyu78qpWXOj5qLGvYyfac2g7WF2" can create their own profile.
     * @allow (update) User "ceyu78qpWXOj5qLGvYyfac2g7WF2" can update their own profile.
     * @allow (delete) User "ceyu78qpWXOj5qLGvYyfac2g7WF2" can delete their own profile.
     * @deny (get) User "anotherUser" cannot get User "ceyu78qpWXOj5qLGvYyfac2g7WF2" profile.
     * @deny (create) User "anotherUser" cannot create User "ceyu78qpWXOj5qLGvYyfac2g7WF2" profile.
     * @deny (update) User "anotherUser" cannot update User "ceyu78qpWXOj5qLGvYyfac2g7WF2" profile.
     * @deny (delete) User "anotherUser" cannot delete User "ceyu78qpWXOj5qLGvYyfac2g7WF2" profile.
     * @principle Enforces strict user ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows admins to create broadcast messages.
     * @path /broadcastMessages/{broadcastMessageId}
     * @allow (create) User with isAdmin role can create a broadcast message.
     * @deny (create) User without isAdmin role cannot create a broadcast message.
     */
    match /broadcastMessages/{broadcastMessageId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows reading and writing of user roles only by admins.
     * @path /roles/{userId}
     */
    match /roles/{userId} {
        allow get: if isAdmin();
        allow list: if isAdmin();
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }
    
    /**
     * @description Allows reading and writing of Darshan wait times only by admins.
     * @path /darshanTimes/{darshanTimeId}
     */
    match /darshanTimes/{darshanTimeId} {
        allow get: if true;
        allow list: if true;
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

   /**
     * @description Allows admins to create staff shifts.
     * @path /staffShifts/{shiftId}
     * @allow (create) User with isAdmin role can create a shift.
     * @deny (create) User without isAdmin role cannot create a shift.
     */
    match /staffShifts/{shiftId} {
      allow get: if true;
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isAdmin() {
    return exists(/databases/$(database)/documents/roles/$(request.auth.uid)) && get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.isAdmin == true;
  }
}