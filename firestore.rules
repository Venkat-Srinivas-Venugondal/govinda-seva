/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model, with specific rules for each collection.
 *
 * Data Structure:
 * - /issueReports/{issueReportId}: Issues reported by devotees.
 * - /emergencyAlerts/{emergencyAlertId}: Emergency alerts from devotees.
 * - /users/{userId}: Public user profiles.
 * - /broadcastMessages/{broadcastMessageId}: Messages broadcast by admins.
 * - /roles/{userId}: User roles (isAdmin, isVolunteer).
 * - /darshanTimes/{darshanTimeId}: Darshan wait times.
 * - /staffShifts/{shiftId}: Staff shift details.
 *
 * Key Security Decisions:
 * - Listing of any collection is disallowed by default.
 * - User profiles (/users/{userId}) are readable by all but only writable by the user themselves.
 * - Roles are only writable by admins.
 *
 * Denormalization for Authorization:
 * - The rules depend on the "roles" collection to determine admin status. Consider denormalizing roles directly onto the user document for faster checks if performance becomes an issue.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read issue reports, but restricts creation to authenticated users. Updates and deletes are disallowed.
     * @path /databases/{database}/documents/issueReports/{issueReportId}
     * @allow (get) - Any user can read an issue report.
     * @allow (create) - Any authenticated user can create an issue report. The 'reportedBy' field must match their UID.
     * @deny (update) - No one can update an issue report.
     * @deny (delete) - No one can delete an issue report.
     * @principle Allows public read access while restricting write access to authenticated users.
     */
    match /issueReports/{issueReportId} {
      allow get: if true;
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.reportedBy == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read emergency alerts, but restricts creation to authenticated users. Updates and deletes are disallowed.
     * @path /databases/{database}/documents/emergencyAlerts/{emergencyAlertId}
     * @allow (get) - Any user can read an emergency alert.
     * @allow (create) - Any authenticated user can create an emergency alert. The 'sentBy' field must match their UID.
     * @deny (update) - No one can update an emergency alert.
     * @deny (delete) - No one can delete an emergency alert.
     * @principle Allows public read access while restricting write access to authenticated users.
     */
    match /emergencyAlerts/{emergencyAlertId} {
      allow get: if true;
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.sentBy == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read user profiles, but restricts updates and deletes to the user themselves. Only the user can create their profile.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (get) - Any user can read a user profile.
     * @allow (create) - Any authenticated user can create their own profile, with the document ID matching their UID.
     * @allow (update) - Only the user can update their own profile.
     * @allow (delete) - Only the user can delete their own profile.
     * @deny (create) - A user cannot create a profile for another user (userId mismatch).
     * @deny (update) - A user cannot update another user's profile (userId mismatch).
     * @deny (delete) - A user cannot delete another user's profile (userId mismatch).
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      allow get: if true;
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && request.auth.uid == userId;
      allow delete: if isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Allows anyone to read broadcast messages, but restricts creation to admins. Updates and deletes are disallowed.
     * @path /databases/{database}/documents/broadcastMessages/{broadcastMessageId}
     * @allow (get) - Any user can read a broadcast message.
     * @allow (create) - Only admins can create broadcast messages. The 'sentBy' field must match the admin's UID.
     * @deny (update) - No one can update a broadcast message.
     * @deny (delete) - No one can delete a broadcast message.
     * @principle Allows public read access while restricting write access to admins.
     */
    match /broadcastMessages/{broadcastMessageId} {
      allow get: if true;
      allow list: if false;
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Restricts read and write access to user roles to admins only.
     * @path /databases/{database}/documents/roles/{userId}
     * @allow (get) - Only admins can read user roles.
     * @allow (create) - Only admins can create user roles.
     * @allow (update) - Only admins can update user roles.
     * @allow (delete) - Only admins can delete user roles.
     * @principle Enforces admin-only access for role management.
     */
    match /roles/{userId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows anyone to read darshan times, but restricts creation, updates, and deletes to admins only.
     * @path /databases/{database}/documents/darshanTimes/{darshanTimeId}
     * @allow (get) - Any user can read darshan times.
     * @allow (create) - Only admins can create darshan times.
     * @allow (update) - Only admins can update darshan times.
     * @allow (delete) - Only admins can delete darshan times.
     */
    match /darshanTimes/{darshanTimeId} {
      allow get: if true;
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows anyone to read staff shifts, but restricts creation, updates, and deletes to admins only.
     * @path /databases/{database}/documents/staffShifts/{shiftId}
     * @allow (get) - Any user can read staff shift details.
     * @allow (create) - Only admins can create staff shift details.
     * @allow (update) - Only admins can update staff shift details.
     * @allow (delete) - Only admins can delete staff shift details.
     * @principle Restricts staff shift management to administrators.
     */
    match /staffShifts/{shiftId} {
      allow get: if true;
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isAdmin() {
    return isSignedIn() && get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.isAdmin == true;
  }

  function isVolunteer() {
    return isSignedIn() && get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.isVolunteer == true;
  }
}