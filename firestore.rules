/**
 * @file Firestore Security Rules
 * @core-philosophy This ruleset enforces a combination of user-based and role-based access control.
 *  - Users can only read/write their own profile data.
 *  - Admins can create/update/delete broadcast messages and darshan times.
 *  - Any authenticated user can create issue reports and emergency alerts.
 * @data-structure
 *  - /users/{userId}: Stores user profile data.
 *  - /issueReports/{issueReportId}: Stores issue reports.
 *  - /emergencyAlerts/{emergencyAlertId}: Stores emergency alerts.
 *  - /broadcastMessages/{broadcastMessageId}: Stores broadcast messages.
 *  - /roles/{userId}: Stores user roles.
 *  - /darshanTimes/{darshanTimeId}: Stores darshan wait times.
 *  - /staffShifts/{shiftId}: Stores staff shift details.
 * @key-security-decisions
 *  - Users cannot list all users.
 *  - Only admins can manage broadcast messages and darshan times.
 *  - Issue reports and emergency alerts are open to any authenticated user for creation, but not for modification.
 * @denormalization-for-authorization
 *  - Admin status is stored in the /roles/{userId} document to avoid having to query all users for admin status.
 * @structural-segregation
 *  - None applicable
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the existing owner of the resource.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user is an admin.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.isAdmin == true;
    }

    /**
     * @description Rules for /issueReports/{issueReportId} collection.
     * @path /issueReports/{issueReportId}
     * @allow (create) Signed-in user creates a new issue report.
     *  request.auth.uid != null
     *  request.resource.data.reportedBy == request.auth.uid
     * @deny (create) Unauthenticated user tries to create a new issue report.
     *  request.auth.uid == null
     * @principle Allows any authenticated user to create issue reports, enforcing that the 'reportedBy' field matches the user's UID.
     */
    match /issueReports/{issueReportId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for /emergencyAlerts/{emergencyAlertId} collection.
     * @path /emergencyAlerts/{emergencyAlertId}
     * @allow (create) Signed-in user creates a new emergency alert.
     *  request.auth.uid != null
     *  request.resource.data.sentBy == request.auth.uid
     * @deny (create) Unauthenticated user tries to create a new emergency alert.
     *  request.auth.uid == null
     * @principle Allows any authenticated user to create emergency alerts, enforcing that the 'sentBy' field matches the user's UID.
     */
    match /emergencyAlerts/{emergencyAlertId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for /users/{userId} collection.
     * @path /users/{userId}
     * @allow (get) User reads their own profile.
     *  request.auth.uid == userId
     * @allow (create) User creates their own profile (self-registration).
     *  request.auth.uid == userId
     *  request.resource.data.uid == userId
     * @allow (update) User updates their own profile.
     *  request.auth.uid == userId
     *  request.resource.data.uid == resource.data.uid
     * @allow (delete) User deletes their own profile.
     *  request.auth.uid == userId
     * @deny (get) User tries to read another user's profile.
     *  request.auth.uid != userId
     * @deny (create) User tries to create a profile with a mismatched userId.
     *  request.auth.uid != userId
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for /broadcastMessages/{broadcastMessageId} collection.
     * @path /broadcastMessages/{broadcastMessageId}
     * @allow (create) Admin creates a new broadcast message.
     *  isAdmin()
     *  request.resource.data.sentBy == request.auth.uid
     * @allow (update) Admin updates a broadcast message.
     *  isAdmin()
     * @allow (delete) Admin deletes a broadcast message.
     *  isAdmin()
     * @deny (create) Non-admin user tries to create a new broadcast message.
     *  !isAdmin()
     * @principle Restricts broadcast message management to admins only.
     */
    match /broadcastMessages/{broadcastMessageId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for /roles/{userId} collection.
     * @path /roles/{userId}
     * @allow (get) Any authenticated user can read roles.
     *  isSignedIn()
     * @allow (create) Only admin can create roles.
     *  isAdmin()
     *  request.resource.data.uid == userId
     * @allow (update) Only admin can update roles.
     *  isAdmin()
     *  request.resource.data.uid == resource.data.uid
     * @deny (create) Non-admin user tries to create a role with mismatched uid.
     *  !isAdmin()
     * @principle Restricts role management to admins only.
     */
    match /roles/{userId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if false;
    }

    /**
     * @description Rules for /darshanTimes/{darshanTimeId} collection.
     * @path /darshanTimes/{darshanTimeId}
     * @allow (create) Admin creates a new darshan time.
     *  isAdmin()
     *  request.resource.data.updatedBy == request.auth.uid
     * @allow (update) Admin updates a darshan time.
     *  isAdmin()
     * @allow (delete) Admin deletes a darshan time.
     *  isAdmin()
     * @deny (create) Non-admin user tries to create a new darshan time.
     *  !isAdmin()
     * @principle Restricts darshan time management to admins only.
     */
    match /darshanTimes/{darshanTimeId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for /staffShifts/{shiftId} collection.
     * @path /staffShifts/{shiftId}
     */
    match /staffShifts/{shiftId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
  }
}