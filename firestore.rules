/**
 * @file Firebase Security Rules for the application.
 *
 * @core_philosophy This ruleset implements a hybrid security model:
 *   - User profiles are public, but only the user can manage their own profile.
 *   - Admins can manage broadcast messages and darshan times.
 *   - Any authenticated user can submit issue reports and emergency alerts.
 *
 * @data_structure
 *   - /users/{userId}: Public profile information for each user.
 *   - /issueReports/{issueReportId}: Issue reports submitted by users.
 *   - /emergencyAlerts/{emergencyAlertId}: Emergency alerts sent by users.
 *   - /broadcastMessages/{broadcastMessageId}: Messages broadcast by admins.
 *   - /roles/{userId}: User roles (isAdmin, isVolunteer).
 *   - /darshanTimes/{darshanTimeId}: Darshan wait times.
 *   - /staffShifts/{shiftId}: Staff shift details.
 *
 * @key_security_decisions
 *   - User listing is allowed since user profiles are public.
 *   - Only admins can create broadcast messages and update Darshan times.
 *   - Data shape is not strictly enforced to allow for rapid prototyping.
 *
 * @denormalization_for_authorization
 *   - The `roles` collection is used to store user roles to avoid needing to embed role information in the user document itself.  This simplifies role management and avoids data duplication in the user profile.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants read access to all users and write access only to the user themselves.
     * @path /users/{userId}
     * @allow (get, list): Any user can read user profiles.
     * @allow (create, update, delete): Only the user with matching ID can modify their own profile.
     * @deny (create, update, delete): User attempts to modify another user's profile.
     * @principle Enforces document ownership for profile management.
     */
    match /users/{userId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && request.auth.uid == userId;
      allow delete: if isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Allows any authenticated user to create issue reports.
     * @path /issueReports/{issueReportId}
     * @allow (create): Any logged-in user can create an issue report.
     * @allow (get, list): Any user can view issue reports.
     * @allow (update, delete): No one can update or delete issue reports.
     * @deny (update, delete): Prevents modification or deletion of existing issue reports.
     * @principle Allows public issue reporting while restricting modifications.
     */
    match /issueReports/{issueReportId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Allows any authenticated user to create emergency alerts.
     * @path /emergencyAlerts/{emergencyAlertId}
     * @allow (create): Any logged-in user can create an emergency alert.
     * @allow (get, list): Any user can view emergency alerts.
     * @allow (update, delete): No one can update or delete emergency alerts.
     * @deny (update, delete): Prevents modification or deletion of existing emergency alerts.
     * @principle Allows public emergency reporting while restricting modifications.
     */
    match /emergencyAlerts/{emergencyAlertId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Allows admins to create, read, update, and delete broadcast messages.
     * @path /broadcastMessages/{broadcastMessageId}
     * @allow (create): Only admins can create broadcast messages.
     * @allow (get, list): Any user can view broadcast messages.
     * @allow (update, delete): Only admins can modify or delete broadcast messages.
     * @deny (create, update, delete): Non-admins are prevented from creating, updating, or deleting messages.
     * @principle Restricts message management to authorized admins.
     */
    match /broadcastMessages/{broadcastMessageId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

     /**
      * @description Allows reading roles and setting of admin and volunteer roles only by the respective user.
      * @path /roles/{userId}
      * @allow (get): Any authenticated user can read their roles.
      * @allow (create, update): Users can set their own roles.
      * @deny (create, update): Users cannot modify other users' roles.
      */
    match /roles/{userId} {
        allow get: if isSignedIn() && request.auth.uid == userId;
        allow create: if isSignedIn() && request.auth.uid == userId;
        allow update: if isSignedIn() && request.auth.uid == userId;
        allow delete: if false;
    }

    /**
     * @description Allows admins to create, read, update, and delete Darshan times.
     * @path /darshanTimes/{darshanTimeId}
     * @allow (create): Only admins can create Darshan times.
     * @allow (get, list): Any user can view Darshan times.
     * @allow (update, delete): Only admins can modify or delete Darshan times.
     * @deny (create, update, delete): Non-admins are prevented from creating, updating, or deleting Darshan times.
     * @principle Restricts Darshan time management to authorized admins.
     */
    match /darshanTimes/{darshanTimeId} {
        allow get, list: if true;
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

    /**
     * @description Allows creating, reading, updating, and deleting staff shifts.
     * @path /staffShifts/{shiftId}
     */
    match /staffShifts/{shiftId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Checks if the user is signed in.
     * @return True if the user is signed in, false otherwise.
     * @principle Ensures that only authenticated users can access certain data.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requesting user is the owner of the document.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     * @return True if the user is the owner, false otherwise.
     * @principle Enforces ownership-based access control.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the requesting user is an admin.
     * @return True if the user is an admin, false otherwise.
     * @principle Enforces role-based access control.
     */
    function isAdmin() {
      return get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.isAdmin == true;
    }

     /**
      * @description Checks if the document exists and the requesting user is the owner of the document.
      * @param {string} userId - The user ID to compare against the request's auth UID.
      * @return True if the user is the owner and resource exists, false otherwise.
      * @principle Enforces ownership-based access control.
      */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}