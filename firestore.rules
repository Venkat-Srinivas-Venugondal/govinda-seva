/**
 * @fileoverview Firestore Security Rules for the devotee app.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by default, enforcing strict access control
 * based on user roles (admin, volunteer, devotee) and resource ownership.
 * Data validation is relaxed to allow for rapid prototyping.
 *
 * Data Structure:
 * - /issueReports/{issueReportId}: Issue reports submitted by devotees.
 * - /emergencyAlerts/{emergencyAlertId}: Emergency alerts sent by devotees.
 * - /users/{userId}: Public user profiles.
 * - /broadcastMessages/{broadcastMessageId}: Broadcast messages sent by admins.
 * - /roles/{userId}: User roles (isAdmin, isVolunteer).
 * - /darshanTimes/{darshanTimeId}: Darshan wait times.
 *
 * Key Security Decisions:
 * - User listing is generally disallowed to protect privacy.
 * - Public read access is granted only for specific collections (e.g., broadcastMessages).
 * - Owner-only write access is enforced for user-specific data.
 * - Role-based access is used for administrative functions.
 *
 * Denormalization for Authorization:
 * - The /roles/{userId} document is used to determine admin/volunteer status.
 *   This avoids complex queries and ensures efficient access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows any authenticated user to create issue reports, but restricts read, update, and delete operations.
     * @path /issueReports/{issueReportId}
     * @allow (create) - Any authenticated user can create an issue report.
     * @deny (get, list, update, delete) - Only admins can perform these actions (TODO: Implement admin check).
     * @principle Allows creation of issue reports by any signed-in user.
     */
    match /issueReports/{issueReportId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows any authenticated user to create emergency alerts, but restricts read, update, and delete operations.
     * @path /emergencyAlerts/{emergencyAlertId}
     * @allow (create) - Any authenticated user can create an emergency alert.
     * @deny (get, list, update, delete) - Only admins can perform these actions (TODO: Implement admin check).
     * @principle Allows creation of emergency alerts by any signed-in user.
     */
    match /emergencyAlerts/{emergencyAlertId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows a user to read and write their own profile.
     * @path /users/{userId}
     * @allow (get, list) User can view their own profile or admins can list all users.
     * @allow (create) User can create their profile if the userId matches their auth.uid.
     * @allow (update, delete) User can update/delete their own profile.
     * @deny (create) User cannot create a profile with a different userId.
     * @principle Enforces user-ownership for profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isNewOwner(userId);
      allow update: if isOwner(userId) && isSignedIn();
      allow delete: if isOwner(userId) && isSignedIn();
    }

    /**
     * @description Allows anyone to read broadcast messages, but only admins can create, update, or delete them.
     * @path /broadcastMessages/{broadcastMessageId}
     * @allow (get, list) - Anyone can read broadcast messages.
     * @deny (create, update, delete) - Only admins can create, update, or delete broadcast messages (TODO: Implement admin check).
     * @principle Allows public read access but restricts write access to admins.
     */
    match /broadcastMessages/{broadcastMessageId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows a user to read and write their own role.
     * @path /roles/{userId}
     * @allow (get, list) User can view their own roles.
     * @allow (create) User can create their roles if the userId matches their auth.uid.
     * @allow (update, delete) User can update/delete their own roles.
     * @deny (create) User cannot create roles with a different userId.
     * @principle Enforces user-ownership for roles.
     */
    match /roles/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isNewOwner(userId);
      allow update: if isOwner(userId) && isSignedIn();
      allow delete: if isOwner(userId) && isSignedIn();
    }

    /**
     * @description Allows admins to create, read, update and delete Darshan times.
     * @path /darshanTimes/{darshanTimeId}
     * @allow (get, list) - Admins can read darshan times.
     * @allow (create, update, delete) - Only admins can create, update, or delete darshan times.
     * @principle Restricts access to admins.
     */
    match /darshanTimes/{darshanTimeId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isNewOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }

  function isAdmin() {
    return isSignedIn() && get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.isAdmin == true;
  }
}