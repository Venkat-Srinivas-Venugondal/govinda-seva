/**
 * @file Firebase Security Rules for Firestore.
 *
 * @core_philosophy This ruleset prioritizes secure data access based on role-based and ownership-based models.
 *   -  Access to user-specific data is restricted to the user themselves.
 *   -  Administrative actions are limited to authenticated administrators.
 *   -  Public read access is granted only where explicitly intended and safe.
 * @data_structure
 *   -  /users/{userId}: Stores public profile information for each user.
 *   -  /issueReports/{issueReportId}: Stores issue reports submitted by users.
 *   -  /emergencyAlerts/{emergencyAlertId}: Stores emergency alerts sent by users.
 *   -  /broadcastMessages/{broadcastMessageId}: Stores broadcast messages sent by admins.
 *   -  /roles/{userId}: Stores user roles (admin, volunteer) for access control.
 *   -  /darshanTimes/{darshanTimeId}: Stores historical and current Darshan wait times.
 *   -  /staffShifts/{shiftId}: Stores shift details for staff and volunteers.
 * @key_security_decisions
 *   -  User listing is disallowed to protect user privacy.
 *   -  Write operations are strictly controlled to prevent unauthorized data modification.
 *   -  Data validation is limited to relational integrity and authorization checks to facilitate rapid prototyping.
 * @denormalization_for_authorization
 *   -  The 'roles' collection is used to store admin and volunteer status, which can be used in rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     * @param {string} userId The user ID to compare against the request's authentication UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is an existing owner of the resource.
     * @param {string} userId The user ID to compare against the resource's owner ID.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user has the 'admin' role.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.isAdmin == true;
    }

    /**
     * @description Checks if the authenticated user has the 'volunteer' role.
     * @return {boolean} True if the user is a volunteer, false otherwise.
     */
    function isVolunteer() {
      return isSignedIn() && get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.isVolunteer == true;
    }

    /**
     * @description Rules for /issueReports/{issueReportId}
     * @path /issueReports/{issueReportId}
     * @allow (create) User abc can create an issue report.
     *   request.auth.uid: "abc"
     *   request.resource.data.reportedBy: "abc"
     * @deny (create) User def cannot create an issue report for user abc.
     *   request.auth.uid: "def"
     *   request.resource.data.reportedBy: "abc"
     * @principle Enforces user-submitted issue reports with auth validation.
     */
    match /issueReports/{issueReportId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.reportedBy == request.auth.uid;
      allow update: if false; // TODO: Implement logic to allow admins to update the status, or the reporter to update details within a time window
      allow delete: if false; // TODO: Implement logic to allow admins to delete issue reports.
    }

    /**
     * @description Rules for /emergencyAlerts/{emergencyAlertId}
     * @path /emergencyAlerts/{emergencyAlertId}
     * @allow (create) User abc can create an emergency alert.
     *   request.auth.uid: "abc"
     *   request.resource.data.sentBy: "abc"
     * @deny (create) User def cannot create an emergency alert for user abc.
     *   request.auth.uid: "def"
     *   request.resource.data.sentBy: "abc"
     * @principle Enforces user-submitted emergency alerts with auth validation.
     */
    match /emergencyAlerts/{emergencyAlertId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.sentBy == request.auth.uid;
      allow update: if false; // Emergency alerts should not be updated after creation
      allow delete: if false; // TODO: Implement logic to allow admins to delete emergency alerts.
    }

    /**
     * @description Rules for /users/{userId}
     * @path /users/{userId}
     * @allow (create) User abc can create their own user document.
     *   request.auth.uid: "abc"
     *   userId: "abc"
     *   request.resource.data.uid: "abc"
     * @allow (get) Any signed-in user can read a user document.
     *   request.auth.uid: "any_user"
     * @deny (create) User def cannot create a user document for user abc.
     *   request.auth.uid: "def"
     *   userId: "abc"
     *   request.resource.data.uid: "abc"
     * @principle Enforces user-owned data with self-creation.
     */
    match /users/{userId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == userId; //Prevents changing the uid
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for /broadcastMessages/{broadcastMessageId}
     * @path /broadcastMessages/{broadcastMessageId}
     * @allow (create) Admin can create a broadcast message.
     *   request.auth.uid: "admin_abc"
     * @deny (create) Non-admin user cannot create a broadcast message.
     *   request.auth.uid: "devotee_xyz"
     * @principle Enforces admin-only creation of broadcast messages.
     */
    match /broadcastMessages/{broadcastMessageId} {
      allow get: if isSignedIn();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if false; // Broadcast messages should not be updated.
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for /roles/{userId}
     * @path /roles/{userId}
     * @allow (create) Admin can create a role assignment.
     *   request.auth.uid: "admin_abc"
     * @deny (create) Non-admin user cannot create a role assignment.
     *   request.auth.uid: "devotee_xyz"
     * @principle Enforces admin-only role assignments.
     */
    match /roles/{userId} {
      allow get: if isAdmin() || isOwner(userId);
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for /darshanTimes/{darshanTimeId}
     * @path /darshanTimes/{darshanTimeId}
     * @allow (get) Any user can read the Darshan wait times.
     * @allow (create) Only admins can update the Darshan wait times.
     * @deny (create) Non-admin user cannot update the Darshan wait times.
     * @principle Allows public read access with admin-only updates.
     */
    match /darshanTimes/{darshanTimeId} {
      allow get: if true;
      allow list: if isAdmin(); // Only admins can list all entries.
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for /staffShifts/{shiftId}
     * @path /staffShifts/{shiftId}
     * @allow (create) Only admins can create staff shift records.
     * @deny (create) Non-admin user cannot create staff shift records.
     * @principle Enforces admin-only management of staff shifts.
     */
    match /staffShifts/{shiftId} {
      allow get: if isAdmin() || isVolunteer();
      allow list: if isAdmin() || isVolunteer();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}