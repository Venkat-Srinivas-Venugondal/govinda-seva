{
  "entities": {
    "IssueReport": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "IssueReport",
      "type": "object",
      "description": "Represents an issue reported by a devotee.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the issue report."
        },
        "details": {
          "type": "string",
          "description": "Textual description of the reported issue."
        },
        "latitude": {
          "type": "number",
          "description": "Latitude coordinate of the issue location."
        },
        "longitude": {
          "type": "number",
          "description": "Longitude coordinate of the issue location."
        },
        "reportedBy": {
          "type": "string",
          "description": "Identifier of the devotee who reported the issue."
        },
        "status": {
          "type": "string",
          "description": "The current status of the issue (e.g., 'reported', 'in progress', 'completed').",
          "format": "string"
        },
        "timestamp": {
          "type": "string",
          "description": "Timestamp of when the issue was reported.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "details",
        "latitude",
        "longitude",
        "reportedBy",
        "status",
        "timestamp"
      ]
    },
    "EmergencyAlert": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "EmergencyAlert",
      "type": "object",
      "description": "Represents an emergency SOS alert sent by a devotee.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the emergency alert."
        },
        "latitude": {
          "type": "number",
          "description": "Latitude coordinate of the devotee's location."
        },
        "longitude": {
          "type": "number",
          "description": "Longitude coordinate of the devotee's location."
        },
        "timestamp": {
          "type": "string",
          "description": "Timestamp of when the emergency alert was sent.",
          "format": "date-time"
        },
        "sentBy": {
          "type": "string",
          "description": "Identifier of the devotee who sent the alert."
        }
      },
      "required": [
        "id",
        "latitude",
        "longitude",
        "timestamp",
        "sentBy"
      ]
    },
    "Devotee": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Devotee",
      "type": "object",
      "description": "Represents a devotee using the application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the devotee."
        },
        "name": {
          "type": "string",
          "description": "Name of the devotee."
        },
        "email": {
          "type": "string",
          "description": "Email address of the devotee.",
          "format": "email"
        },
        "phoneNumber": {
          "type": "string",
          "description": "Phone number of the devotee."
        }
      },
      "required": [
        "id",
        "name",
        "email"
      ]
    },
    "Volunteer": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Volunteer",
      "type": "object",
      "description": "Represents a volunteer.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the volunteer."
        },
        "name": {
          "type": "string",
          "description": "Name of the volunteer."
        },
        "email": {
          "type": "string",
          "description": "Email address of the volunteer.",
          "format": "email"
        },
        "phoneNumber": {
          "type": "string",
          "description": "Phone number of the volunteer."
        },
        "assignedTasks": {
          "type": "array",
          "description": "References to IssueReports that this volunteer is assigned to.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "name",
        "email"
      ]
    },
    "Admin": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Admin",
      "type": "object",
      "description": "Represents an administrator.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the administrator."
        },
        "name": {
          "type": "string",
          "description": "Name of the administrator."
        },
        "email": {
          "type": "string",
          "description": "Email address of the administrator.",
          "format": "email"
        },
        "phoneNumber": {
          "type": "string",
          "description": "Phone number of the administrator."
        }
      },
      "required": [
        "id",
        "name",
        "email"
      ]
    },
    "BroadcastMessage": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "BroadcastMessage",
      "type": "object",
      "description": "Represents a broadcast message sent to users.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the broadcast message."
        },
        "message": {
          "type": "string",
          "description": "The content of the broadcast message."
        },
        "recipientType": {
          "type": "string",
          "description": "The type of recipient (e.g., 'devotee', 'volunteer')."
        },
        "timestamp": {
          "type": "string",
          "description": "Timestamp of when the message was sent.",
          "format": "date-time"
        },
        "sentBy": {
          "type": "string",
          "description": "Identifier of the admin who sent the broadcast."
        }
      },
      "required": [
        "id",
        "message",
        "recipientType",
        "timestamp",
        "sentBy"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/issueReports/{issueReportId}",
        "definition": {
          "entityName": "IssueReport",
          "schema": {
            "$ref": "#/backend/entities/IssueReport"
          },
          "description": "Stores issue reports submitted by devotees. Includes denormalized 'assignedVolunteers' map for authorization independence.",
          "params": [
            {
              "name": "issueReportId",
              "description": "Unique identifier for the issue report."
            }
          ]
        }
      },
      {
        "path": "/emergencyAlerts/{emergencyAlertId}",
        "definition": {
          "entityName": "EmergencyAlert",
          "schema": {
            "$ref": "#/backend/entities/EmergencyAlert"
          },
          "description": "Stores emergency SOS alerts sent by devotees. Accessible only by admins.",
          "params": [
            {
              "name": "emergencyAlertId",
              "description": "Unique identifier for the emergency alert."
            }
          ]
        }
      },
      {
        "path": "/devotees/{devoteeId}",
        "definition": {
          "entityName": "Devotee",
          "schema": {
            "$ref": "#/backend/entities/Devotee"
          },
          "description": "Stores devotee profiles.",
          "params": [
            {
              "name": "devoteeId",
              "description": "Unique identifier for the devotee."
            }
          ]
        }
      },
      {
        "path": "/volunteers/{volunteerId}",
        "definition": {
          "entityName": "Volunteer",
          "schema": {
            "$ref": "#/backend/entities/Volunteer"
          },
          "description": "Stores volunteer profiles.",
          "params": [
            {
              "name": "volunteerId",
              "description": "Unique identifier for the volunteer."
            }
          ]
        }
      },
      {
        "path": "/admins/{adminId}",
        "definition": {
          "entityName": "Admin",
          "schema": {
            "$ref": "#/backend/entities/Admin"
          },
          "description": "Stores admin profiles.",
          "params": [
            {
              "name": "adminId",
              "description": "Unique identifier for the admin."
            }
          ]
        }
      },
      {
        "path": "/broadcastMessages/{broadcastMessageId}",
        "definition": {
          "entityName": "BroadcastMessage",
          "schema": {
            "$ref": "#/backend/entities/BroadcastMessage"
          },
          "description": "Stores broadcast messages sent to users.",
          "params": [
            {
              "name": "broadcastMessageId",
              "description": "Unique identifier for the broadcast message."
            }
          ]
        }
      },
      {
        "path": "/roles_admin/{userId}",
        "definition": {
          "entityName": "AdminRole",
          "schema": {
            "$ref": "#/backend/entities/Admin"
          },
          "description": "Documents in this collection represent admin users.  Document existence confers admin role.",
          "params": [
            {
              "name": "userId",
              "description": "User ID of the admin."
            }
          ]
        }
      },
      {
        "path": "/roles_volunteer/{userId}",
        "definition": {
          "entityName": "VolunteerRole",
          "schema": {
            "$ref": "#/backend/entities/Volunteer"
          },
          "description": "Documents in this collection represent volunteer users. Document existence confers volunteer role.",
          "params": [
            {
              "name": "userId",
              "description": "User ID of the volunteer."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/devoteeData",
        "definition": {
          "entityName": "DevoteeData",
          "schema": {
            "$ref": "#/backend/entities/Devotee"
          },
          "description": "Private devotee data, accessible only to the user and admins.  Useful for storing settings or other user-specific information.",
          "params": [
            {
              "name": "userId",
              "description": "User ID of the devotee."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to ensure security, scalability, and ease of debugging, adhering to the principles of Authorization Independence, Clarity of Intent, DBAC, and QAPs. Authorization Independence is achieved through denormalization. For example, the `issueReports` collection includes a denormalized `assignedVolunteers` map. This avoids `get()` calls in security rules, enabling atomic operations. Structural Segregation separates data with different access needs into different collections (e.g., `issueReports`, `emergencyAlerts`, `volunteers`, `admins`, `broadcastMessages`). Access Modeling uses path-based ownership (`/users/{userId}/devoteeData`) and Membership Maps for collaborative data (not explicitly needed here but a good pattern to keep in mind). The structure supports QAPs (Rules Are Not Filters) by ensuring each collection has a homogeneous security posture.  Specifically, the `issueReports` are accessible based on volunteer and admin roles, and emergency alerts are designed for admin-only access. Global roles are handled via existence checks in dedicated collections (`/roles_admin/{uid}`, `/roles_volunteer/{uid}`). This design ensures that the volunteer task dashboard displays the relevant issue reports securely, only showing data that the authenticated volunteer or admin is authorized to access. The inclusion of `assignedVolunteers` also allows checking if the current user has access.  The admin and volunteer roles are managed via the `roles_admin` and `roles_volunteer` collections.  If the devotee data needed to be tied to a specific user, that would be stored under `/users/{userId}/devoteeData` to associate specific data to a user."
  }
}